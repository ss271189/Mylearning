A user story/ scenario was given to a candidate. They were following PAIR PROGRAMMING.
Most of the scenario could be developed as a standalone JAVA application.
For persistence, in memory data structures was sufficient; no db access required.

Interviewer was expecting a candidate to design HLD for a given problem statement.

While discussing design; he was checking whether he/she has understood and applied design patterns.
They were expecting candidate to know Architectural pattern like IoC, MVC.
All the questions were mostly about why do we use a particular pattern in a given context; not how to use it.
They were expecting candidate to know terms like 'Separation of concern', 'open close principle'.

They were checking whether he/she is concerned about validation/constraint checks.
Also they were expecting them to write test cases (how to sample data fixture)
Test cases covering edge/boundry case, sanity check.  

Some of the scenarios given by a client were as follow:

Scenario 1:

	This was related to book library. Provide operations to add/remove/update/delete entities like a member, a book.
	The system should be able to lend a book to registered members. One of the constraint given was a member can atmost 
	be given 6 books only at a time.

Scenario 2:

	Create an application to simulate scenario for a bank. There are 2 type of Account currently. Lets say SAVINGS and CURRENT.
	SAVINGS account can be opened by an individual. CURRENT account can be opened by corporate only.
	The operations that should be provided by system are
		Add/remove/update/delete an account.
		Calculate interest for a given account.
		in future, new type of account like Loan account, recurring account should be added.
		
	In this scenario, they were expecting candidate to talk about 'Separation of concern', 'Open close principle'.
	Also interviewer asked about how to fit ORM layer in this system.
	
	He also asked why do we add a service layer when one can define those operations in bean itself!
	How service layer is different from DAO layer.
	
Scenario 3:

	Lets assume that you are working for a shopping application where user is already registered in a system.
	He/She has specified interests during registeration process itself.
	So now when user logs in next time, he/she should be shown products according to interests they had selected earlier.
	Suppose this is a web application and View/Controller are already defined.
	
	You are required to design MODEL for this system,now.
	
Other scenarios:

	One of the candidate was asked to implement STACK operations.
	Another candidate was asked to sort entity (Employee for example) based on an attribute.
	
	
Topic wise questions:

OOPS:

	1> Why to create setters and getters; why not allow attributes to be accessed directly by the user?
	2> Why interfaces? (from HLD point of view, not syntactical points)	

Exception Handling:

	1> What is difference between Checked and Unchecked exceptions?
	2> Why compiler forces programmer to handle checked exceptions?
	3> Exception handling features added in JDK 7.0.
	
The collection framework:

	1> on what factors, you wiil decide data structure for a given scenario?
	2> What is difference between Comparable and Comparator interface? 	
	3> Hash based data structure and their counterpoarts in Concurrency?
	4> ConcurrentHashmap is defined in which package?
	5> In which version, Concurrency framework was added?
	6> Explain a scenario when we get ConcurrentModificationException?	
	7> Fail fast iterators, how they work?
	8> Fail safe iterators; how to create them?
	
Multi-threading:

	1> Why multi-threading is needed?
	2> How synchronization works?
	3> Need of wait() and notify() methods; why they are put up in Object class; not in Thread class itself?
	4> What is IllegalMonitorStateException?
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		