// JAVA_Dockerfile

FROM java:8-jre
COPY ./mysql-java-docker.jar /tmp/mysql-java-docker.jar
CMD ["java", "-jar", "/tmp/mysql-java-docker.jar"]


//SQL_Dockerfile

FROM mysql:5.7

EXPOSE 3306
COPY ./setup.sql /tmp/setup.sql
COPY ./entrypoint.sh /tmp/entrypoint.sh
RUN chmod a+x /tmp/entrypoint.sh
ENTRYPOINT ["/tmp/entrypoint.sh"]

CMD ["mysqld", "/tmp/setup.sql"]

//setup.sql






//sql_entrypoint.sh


#!/bin/bash
set -e

# This script is copied from the official Docker MySQL v5.7 repo, and was used as the entrypoint script.
# It is copied here so that we can modify it, and build our database from a script.
# https://github.com/docker-library/mysql/blob/master/5.7/docker-entrypoint.sh

# if command starts with an option, prepend mysqld
if [ "${1:0:1}" = '-' ]; then
	set -- mysqld "$@"
fi

if [ "$1" = 'mysqld' ]; then
	# Get config
	DATADIR="$("$@" --verbose --help --innodb-read-only 2>/dev/null | awk '$1 == "datadir" { print $2; exit }')"

	if [ ! -d "$DATADIR/mysql" ]; then
		if [ -z "$MYSQL_ROOT_PASSWORD" -a -z "$MYSQL_ALLOW_EMPTY_PASSWORD" ]; then
			echo >&2 'error: database is uninitialized and MYSQL_ROOT_PASSWORD not set'
			echo >&2 '  Did you forget to add -e MYSQL_ROOT_PASSWORD=... ?'
			exit 1
		fi

		mkdir -p "$DATADIR"
		chown -R mysql:mysql "$DATADIR"

		echo 'Initializing database'
		mysqld --initialize-insecure=on --datadir="$DATADIR"
		echo 'Database initialized'

		mysqld --user=mysql --datadir="$DATADIR" --skip-networking &
		pid="$!"

		mysql=( mysql --protocol=socket -uroot )

		for i in {30..0}; do
			if echo 'SELECT 1' | "${mysql[@]}" &> /dev/null; then
				break
			fi
			echo 'MySQL init process in progress...'
			sleep 1
		done
		if [ "$i" = 0 ]; then
			echo >&2 'MySQL init process failed.'
			exit 1
		fi

		mysql_tzinfo_to_sql /usr/share/zoneinfo | "${mysql[@]}" mysql

		"${mysql[@]}" <<-EOSQL
			-- What's done in this file shouldn't be replicated
			--  or products like mysql-fabric won't work
			SET @@SESSION.SQL_LOG_BIN=0;
			DELETE FROM mysql.user ;
			CREATE USER 'root'@'%' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}' ;
			GRANT ALL ON *.* TO 'root'@'%' WITH GRANT OPTION ;
			DROP DATABASE IF EXISTS test ;
			FLUSH PRIVILEGES ;
		EOSQL

		if [ ! -z "$MYSQL_ROOT_PASSWORD" ]; then
			mysql+=( -p"${MYSQL_ROOT_PASSWORD}" )
		fi

		if [ "$MYSQL_DATABASE" ]; then
			echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` ;" | "${mysql[@]}"
			mysql+=( "$MYSQL_DATABASE" )
		fi

		if [ "$MYSQL_USER" -a "$MYSQL_PASSWORD" ]; then
			# Modified to add flush privileges
			echo "CREATE USER '"$MYSQL_USER"'@'%' IDENTIFIED BY '"$MYSQL_PASSWORD"'; flush privileges;" | "${mysql[@]}"

			if [ "$MYSQL_DATABASE" ]; then
				# Modified to add flush privileges and grant option
				echo "GRANT ALL ON \`"$MYSQL_DATABASE"\`.* TO '"$MYSQL_USER"'@'%' WITH GRANT OPTION; flush privileges;" | "${mysql[@]}"
			fi

			echo 'FLUSH PRIVILEGES ;' | "${mysql[@]}"
		fi

		# Modified to pull in sql script, this should probably not run every single time
        echo "setting up $MYSQL_DATABASE db"
        mysql -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE < $2

		echo
		for f in /docker-entrypoint-initdb.d/*; do
			case "$f" in
				*.sh)  echo "$0: running $f"; . "$f" ;;
				*.sql) echo "$0: running $f"; "${mysql[@]}" < "$f" && echo ;;
				*)     echo "$0: ignoring $f" ;;
			esac
			echo
		done

		if ! kill -s TERM "$pid" || ! wait "$pid"; then
			echo >&2 'MySQL init process failed.'
			exit 1
		fi

		# Modified so that we can connect with Hibernate, due to the following issue in MySQL:
		# http://stackoverflow.com/a/32054183/974800
		echo "show_compatibility_56=1" >> /etc/mysql/my.cnf

		echo
		echo 'MySQL init process done. Ready for start up.'
		echo
	fi

	chown -R mysql:mysql "$DATADIR"
fi

# This was originally something like exec $@
mysqld




//buildrun.sh

#!/usr/bin/env bash

# Build a fresh jar and copy it into place
#../gradle fatJar
cp ../build/libs/mysql-java-docker-all-1.0-SNAPSHOT.jar ./java_docker/mysql-java-docker.jar

MYSQL_PORT_3306_TCP_ADDR=3306
MYSQL_USER=testapp
MYSQL_DATABASE=sample
MYSQL_PASSWORD=rJQaj5B46ofWjZo2o2648izNCGUcui9o
MYSQL_ROOT_PASSWORD=mxr1OEDobHEgy2k4VvfpTlpVq9tClGQB

# If need to use docker volume list
# or something, but that doesn't exist yet, for now, it won't try to
# re-create it if it exists anyway, so we're ok. See here:
# https://github.com/docker/docker/pull/14242
DBDATA=`docker images -q sample/sql-java`
if [[ -z $DBDATA ]]
then
    echo "creating new shared volume called 'dbdata'"
    # Reference: https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container
    docker create -v /dbdata --name dbdata mysql:5.7 /bin/true

    docker build -t sample/sql-java:v1 ./sql_server_docker/
fi

docker build -t sample/java-docker:v1 ./java_docker/

# The following is set up to be ephemeral, so that the instances that you
# launch are cleaned up after running. Uses the shared Docker volume, dbdata.
# As a note, we modified the entrypoint script so that it pulls in a sql script
# that runs against our existing database every time we run. While this is fine
# for an example, it shouldn't be done in production, as it might blow something up.
# Reference: https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container
# Run command shown here: https://coreos.com/products/enterprise-registry/docs/latest/mysql-container.html
ID=$(docker run \
    -d -p 3306:3306 \
    --env MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD} \
    --env MYSQL_USER=${MYSQL_USER} \
    --env MYSQL_PASSWORD=${MYSQL_PASSWORD} \
    --env MYSQL_DATABASE=${MYSQL_DATABASE} \
    --volumes-from dbdata \
    sample/sql-java:v1;)

docker run --rm sample/java-docker:v1

# Kill the ephemeral mysql daemon image
docker stop $ID
docker rm -f $ID









